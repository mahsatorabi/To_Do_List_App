# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ToDoList.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QColor, QPainter, QPainterPath, QPen, QIcon


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(355, 794)
        MainWindow.setFixedSize(355, 794)
        MainWindow.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(183, 92, 139, 255), stop:0.542289 rgba(255, 209, 231, 255), stop:0.975124 rgba(206, 66, 204, 255), stop:1 rgba(0, 0, 0, 0));")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.item = QtWidgets.QLineEdit(self.centralwidget)
        self.item.setGeometry(QtCore.QRect(30, 20, 291, 41))
        font = QtGui.QFont()
        font.setFamily("Lucida Calligraphy")
        font.setPointSize(15)
        self.item.setFont(font)
        self.item.setStyleSheet("background-color: rgb(249, 237, 255);")
        self.item.setObjectName("item")
        self.addtask = QtWidgets.QPushButton(self.centralwidget)
        self.addtask.setGeometry(QtCore.QRect(40, 80, 121, 51))
        self.addtask.setStyleSheet("QPushButton {background-color: rgb(245, 203, 255);"
            "font: 10pt 'Cascadia Code Light';}"
            "QPushButton:hover {background-color: black; color:white;}"
            )
        self.addtask.setObjectName("addtask")
        self.addtask.clicked.connect(self.add_task)
        self.deletetask = QtWidgets.QPushButton(self.centralwidget)
        self.deletetask.setGeometry(QtCore.QRect(190, 80, 121, 51))
        self.deletetask.setStyleSheet("QPushButton {background-color: rgb(245, 203, 255);"
            "font: 10pt 'Cascadia Code Light';}"
            "QPushButton:hover {background-color: black; color:white;}")
        self.deletetask.setObjectName("deletetask")
        self.deletetask.clicked.connect(self.delete_task)
        self.todolist = QtWidgets.QListWidget(self.centralwidget)
        self.todolist.setGeometry(QtCore.QRect(25, 170, 301, 561))
        self.todolist.setStyleSheet("background-color: rgb(255, 220, 254);\n"
"border-color: rgb(255, 222, 222);")
        self.todolist.setFont(font)
        self.todolist.setObjectName("todolist")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 355, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def add_task(self):
        i = self.item.text().strip()
        if i != "":
            #b = self.todolist.addItem(i)
            self.b = QListWidgetItem(i)
            self.b.setFlags(self.b.flags() | Qt.ItemIsUserCheckable)
            self.b.setCheckState(0)
            self.todolist.addItem(self.b)
        self.todolist.itemChanged.connect(self.stork)
        self.item.clear()

    def stork(self, s):
        if s.checkState() == Qt.Checked:
            s.setForeground(QColor(0, 128, 0))
        else:
            s.setForeground(Qt.black)


    def delete_task(self):
        selects = self.todolist.selectedItems()
        for i in selects:
            row = self.todolist.row(i)
            self.todolist.takeItem(row)
        


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.addtask.setText(_translate("MainWindow", "Add Task"))
        self.deletetask.setText(_translate("MainWindow", "Delete Task"))

if __name__ == "__main__":
    import sys 
    app = QApplication(sys.argv)
    window = QtWidgets.QMainWindow()

    ui = Ui_MainWindow()
    ui.setupUi(window)
    window.setWindowTitle("To Do List")
    window.setWindowIcon(QIcon("todo"))
    window.show()
    sys.exit(app.exec_())